name: Release
on:
  workflow_dispatch:
    inputs:
      Bumpversion:
        description: 'in above drop slect featue branch & below select semantic version bump'
        required: true
        default: 'warning' 
        type: choice
        options:
        - Major
        - Minor
        - Patch


jobs:
  Finalizing-next-release-version:
    # if: |
    #   github.ref_name != 'master' && github.ref_type == 'branch' && github.event_name == 'workflow_dispatch' 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: fetch the tags
        run: |
          git fetch --all --tags
          git tag

      - name: Store the last tag
        run: |         
          echo "LAST_TAG=$(git tag | grep "v*.*.*" | tail -1)" >> $GITHUB_ENV          

      - name: Dispay the last tag
        run: |         
          echo "${{ env.LAST_TAG }}"

      - name: store version
        run: |         
          echo "${{ env.LAST_TAG }}" 
          echo "MAJOR_NO=$(echo ${{ env.LAST_TAG }}" | cut -d'v' -f2 | cut -d'.' -f1)" >> $GITHUB_ENV
          echo "MINOR_NO=$(echo ${{ env.LAST_TAG }}" | cut -d'v' -f2 | cut -d'.' -f2)" >> $GITHUB_ENV
          echo "PATCH_NO=$(echo ${{ env.LAST_TAG }}" | cut -d'v' -f2 | cut -d'.' -f3)" >> $GITHUB_ENV   

      - name: DISPLAY
        run: |         
          echo "${{ env.MAJOR_NO }}" 
          echo "${{ env.MINOR_NO }}" 
          echo "${{ env.PATCH_NO }}"  
          if [[ ${{ github.event.inputs.Bumpversion }} == Major ]]; then echo "LATEST_TAG=$((${{ env.MAJOR_NO }}+1)).0.0" >> $GITHUB_ENV; fi  
          if [[ ${{ github.event.inputs.Bumpversion }} == Minor ]]; then echo "LATEST_TAG=v${{ env.MAJOR_NO }}.$((${{ env.MAJOR_NO }}+1)).0" >> $GITHUB_ENV; fi  
          if [[ ${{ github.event.inputs.Bumpversion }} == Patch ]]; then echo "LATEST_TAG=v${{ env.MAJOR_NO }}.${{ env.MINOR_NO }}.$((${{ env.PATCH_NO }}+1)).0" >> $GITHUB_ENV; fi

      - name: DISPLAY
        run: | 
          echo "${{ env.LATEST_TAG }}"                  



  # echo "LATEST_TAG=$(echo git describe --tags --abbrev=0 | cut -d'v' -f2 | cut -d'V' -f2)" >> $GITHUB_ENV

      # - name: Deciding branch name
      #   shell: "bash"
      #   run: |-
      #     if [[ ${{ github.event.inputs.inputpassed }} == feature ]]; then echo "FINAL_BRANCH_NAME=feature-${{ github.event.inputs.branchname }}" >> $GITHUB_ENV; fi  

#if [[ ${{ github.event.inputs.inputpassed }} == local ]]; then echo "FINAL_BRANCH_NAME=local-${{ github.event.inputs.branchname }}" >> $GITHUB_ENV; fi

      # - name: Display the branch name
      #   run: echo "${{ env.FINAL_BRANCH_NAME }}"

      # - name: create Branch 
      #   run: |
      #     git config --global user.email "githubactions@homedepot.com"
      #     git config --global user.name "githubaction"
      #     echo "your new branch name is feature-${{ github.event.inputs.branchname }}"
      #     git branch ${{ env.FINAL_BRANCH_NAME }}
      #     git checkout ${{ env.FINAL_BRANCH_NAME }}   
      #     mvn versions:set -DnewVersion=${{ env.FINAL_BRANCH_NAME }}-SNAPSHOT -DprocessAllModules -DgenerateBackupPoms=false
      #     git add .
      #     git commit -m "pom.xml file upadted while creating the branch"
      #     git push https://${{ github.token }}@github.com/${{ github.repository }}.git

  # merge-feature-to-master:
  #   if: |
  #     github.ref_name != 'master' && github.ref_type == 'branch' && github.event_name == 'workflow_dispatch' 
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Deciding branch name
  #       shell: "bash"
  #       run: |-
  #         if [[ ${{ github.event.inputs.inputpassed }} == local ]]; then echo "FINAL_BRANCH_NAME=local-${{ github.event.inputs.branchname }}" >> $GITHUB_ENV; fi

  #     - name: Display the branch name
  #       run: echo "${{ env.FINAL_BRANCH_NAME }}"

  #     - name: create Branch 
  #       run: |
  #         git config --global user.email "githubactions@homedepot.com"
  #         git config --global user.name "githubaction"
  #         echo "your new branch name is local-${{ github.event.inputs.branchname }}"
  #         git branch ${{ env.FINAL_BRANCH_NAME }}
  #         git checkout ${{ env.FINAL_BRANCH_NAME }}   
  #         mvn versions:set -DnewVersion=${{ env.FINAL_BRANCH_NAME }}-SNAPSHOT -DprocessAllModules -DgenerateBackupPoms=false
  #         git add .
  #         git commit -m "pom.xml file upadted while creating the branch"
  #         git push https://${{ github.token }}@github.com/${{ github.repository }}.git

#   tag-the-master-branch:
#     if: |
#       github.ref_name != 'master' && github.ref_type == 'branch' && github.event_name == 'workflow_dispatch' 
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2

#       - name: Deciding branch name
#         shell: "bash"
#         run: |-
#           if [[ ${{ github.event.inputs.inputpassed }} == local ]]; then echo "FINAL_BRANCH_NAME=local-${{ github.event.inputs.branchname }}" >> $GITHUB_ENV; fi

#       - name: Display the branch name
#         run: echo "${{ env.FINAL_BRANCH_NAME }}"

#       - name: create Branch 
#         run: |
#           git config --global user.email "githubactions@homedepot.com"
#           git config --global user.name "githubaction"
#           echo "your new branch name is local-${{ github.event.inputs.branchname }}"
#           git branch ${{ env.FINAL_BRANCH_NAME }}
#           git checkout ${{ env.FINAL_BRANCH_NAME }}   
#           mvn versions:set -DnewVersion=${{ env.FINAL_BRANCH_NAME }}-SNAPSHOT -DprocessAllModules -DgenerateBackupPoms=false
#           git add .
#           git commit -m "pom.xml file upadted while creating the branch"
#           git push https://${{ github.token }}@github.com/${{ github.repository }}.git

#   Prod-CI-automatic-trigger:
# #choose the OS in which you want to trigger the job 
#     runs-on: ubuntu-latest
#     needs: Automatic-tag    
#     steps:
# # checkout to branch
#       - name: Checking out...
#         uses: actions/checkout@v2
#         with:
#           token: ${{ secrets.REPO_ACCOUNT_KEY }}
# #Environment variables
#       - name: Set GitHub_Env value
#         run: |
#           echo "HOSTNAME=$(cat ./.github/variable.txt | grep "HOSTNAME" | cut -d'=' -f2)" >> $GITHUB_ENV
#           echo "PROJECT_ID=$(cat ./.github/variable.txt | grep "PROJECT_ID" | cut -d'=' -f2)" >> $GITHUB_ENV
#           echo "MAVEN_GOAL=$(cat ./.github/variable.txt | grep "MAVEN_GOAL" | cut -d'=' -f2)" >> $GITHUB_ENV
#           echo "SLACK_CHANNEL=$(cat ./.github/variable.txt | grep "SLACK_CHANNEL" | cut -d'=' -f2)" >> $GITHUB_ENV        
#           echo "IMAGE_NAME=$(cat ./pom.xml | grep "artifactId" | cut -d'>' -f2 | cut -d'<' -f1 | head -1)" >> $GITHUB_ENV 
#           echo "JAVA_VERSION=$(cat ./.github/variable.txt | grep "JAVA_VERSION" | cut -d'=' -f2)" >> $GITHUB_ENV

#       - name: Display GitHub_Env values
#         run: |
#           echo "The hostname is ${{ env.HOSTNAME }}"
#           echo "The Project id is ${{ env.PROJECT_ID }}" 
#           echo "The maven goal is ${{ env.MAVEN_GOAL }}"    
#           echo "job status will be sent to ${{ env.SLACK_CHANNEL }} slack channel"
#           echo "The image name is ${{ env.IMAGE_NAME }}" 
#           echo "The java version is  ${{ env.JAVA_VERSION }}"        
# # install java in VM
#       - name: Set up JDK ${{ env.JAVA_VERSION }}
#         uses: actions/setup-java@v2
#         with:
#           java-version: '${{ env.JAVA_VERSION }}'                                                                            
#           distribution: 'adopt'
#  # Deciding image tag name based on input received
#       - name: Deciding Image tag 
#         shell: "bash"
#         run: |-
#           if [[ ${{ github.event_name }} == push && ${{ github.ref_type }} == branch && ${{ github.ref_name }} == master ]]; then echo "IMAGE_TAG=${{needs.Automatic-tag.outputs.output1}}" >> $GITHUB_ENV; fi
# #verify the valid commit message received or not for tagging
#       - name: verify the valid commit message received or not for tagging 
#         run: |
#           if [[ ${{ env.IMAGE_TAG }} == v*.*.* ]] || [[ ${{ env.IMAGE_TAG }} == V*.*.* ]]; then exit 0; else exit 1; fi          

#  # Storing the image tag name to TAG_NAME variable by remvoing v from tag

#       - name: Storing image tag name into GitHub variables
#         run: |
#           echo "TAG_NAME=$(echo "${{ env.IMAGE_TAG }}" | cut -d'v' -f2 | cut -d'V' -f2)" >> $GITHUB_ENV
        
#       - name: Display the image tag
#         run: echo "${{ env.TAG_NAME }}"
# #update the version in pom.xml & push to master        
#       - name: update the version in pom.xml & push to master
#         run: |
#           git config --global user.email "githubactions@homedepot.com"
#           git config --global user.name "githubaction"
#           mvn versions:set -DnewVersion=${{ env.TAG_NAME }} -DprocessAllModules -DgenerateBackupPoms=false
#           git add .
#           git commit -m "version in pom.xml file upadted to ${{ env.TAG_NAME }} "
#           git push https://${{ github.token }}@github.com/${{ github.repository }}.git        
# # Build with Maven 
#       - name: Build with Maven
#         run: mvn $MAVEN_GOAL             
# #Authentication to GCR      
#       - uses: google-github-actions/setup-gcloud@master
#         with:
#           service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
#           project_id: ${{ env.PROJECT_ID }}
#           export_default_credentials: true         
# # change path & build docker image          
#       - name: build docker image
#         run: |
#           docker build -t $HOSTNAME/$PROJECT_ID/$IMAGE_NAME:$TAG_NAME .        
# #configure docker use Google cloud while pushing image
#       - name: Configure Docker Client
#         run: |-
#           gcloud auth configure-docker --quiet
#           gcloud auth configure-docker $env.PROJECT_ID --quiet         
# # show all docker images in vm         
#       - name: docker image
#         run: docker images        
# # push  docker image       
#       - name: Docker Image to Container Registry (GCR)
#         run: docker push $HOSTNAME/$PROJECT_ID/$IMAGE_NAME:${{ env.TAG_NAME }}
# # send message to slack channel about job status
#       - name: Post to a Slack channel
#         if: always()
#         run: |
#           curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.workflow }} ||| in ${{ github.event.repository.name }} repository  ||| in ${{ github.ref_name }} ${{ github.ref_type }} ||| is a ${{ job.status }} ||| click below url to see logs ||| ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' ${{ secrets.SLACK_WEBHOOK }}
        
